name: Deploy Stack

on:
  push:
    branches:
      - main

jobs:

  lint:
    name: Lint .NET
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Set up lint tool
        run: dotnet tool install --global dotnet-format
      - name: Install dependencies
        run: dotnet restore src
      - name: Run lint
        run: dotnet format --check --verbosity diagnostic src

  build:
    name: Build .NET
    needs: lint
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Install dependencies
        run: dotnet restore src
      - name: Run build
        run: dotnet build src

  tests:
    name: Tests on .NET
    needs: build
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Install dependencies
        run: dotnet restore src
      - name: Run build
        run: dotnet build src
      - name: Run tests
        run: dotnet test src --verbosity normal
        {% raw %}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TARGET_ACCOUNT }}
        {% endraw %}

  synth:
    name: Synth CDK
    needs: tests
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install CDK and dependencies
        run: npm install -g aws-cdk
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Install dependencies
        run: dotnet restore src
      - name: Run build
        run: dotnet build src
      - name: Run Synth
        run: cdk synth
        {% raw %}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TARGET_ACCOUNT }}
        {% endraw %}

  bootstrap:
    name: CDK Bootstrap
    needs: synth
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: npm dependencies
        run: npm install -g aws-cdk
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Install dependencies
        run: dotnet restore src
      - name: Run build
        run: dotnet build src
      - name: Run Bootstrap
        {% if inputs.custom_iam %}
        run: cdk bootstrap --public-access-block-configuration false --termination-protection --cloudformation-execution-policies arn:aws:iam::$AWS_REGION:policy/{{ inputs.custom_policy }}
        {% else %}
        run: cdk bootstrap --public-access-block-configuration false --termination-protection --cloudformation-execution-policies arn:aws:iam::aws:policy/AdministratorAccess
        {% endif %}
        if: github.ref == 'refs/heads/main'
        {% raw %}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TARGET_ACCOUNT }}
        {% endraw %}

  deploy:
    name: Deploy Stack
    needs: bootstrap
    runs-on: [ {{ runners_label }} ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: npm dependencies
        run: npm install -g aws-cdk
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '{{ inputs.dotnet_version }}'
      - name: Install dependencies
        run: dotnet restore src
      - name: Run build
        run: dotnet build src
      - name: Deploy
        run: cdk deploy --require-approval never "*"
        if: github.ref == 'refs/heads/main'
        {% raw %}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_TARGET_ACCOUNT: ${{ secrets.AWS_TARGET_ACCOUNT }}
        {% endraw %}
